class OffboardControl(Node):
    # ... (other code remains the same)

    def __init__(self) -> None:
        # ... (other code remains the same)
        self.lawnmower_pattern = [
            (0.0, 0.0, -5.0),  # Starting position
            (5.0, 0.0, -5.0),  # Move right
            (5.0, 5.0, -5.0),  # Move up
            (0.0, 5.0, -5.0),  # Move left
            (0.0, 10.0, -5.0),  # Move up
            (5.0, 10.0, -5.0),  # Move right
            # ... and so on, add more points for the pattern as needed
        ]
        self.lawnmower_index = 0

        # ... (other code remains the same)

    def timer_callback(self) -> None:
        """Callback function for the timer."""
        self.publish_offboard_control_heartbeat_signal()

        if self.offboard_setpoint_counter == 10:
            self.engage_offboard_mode()
            self.arm()

        if self.vehicle_local_position.z > self.takeoff_height and self.vehicle_status.nav_state == VehicleStatus.NAVIGATION_STATE_OFFBOARD:
            if self.lawnmower_index < len(self.lawnmower_pattern):
                x, y, z = self.lawnmower_pattern[self.lawnmower_index]
                self.publish_position_setpoint(x, y, z)
                self.lawnmower_index += 1

        elif self.vehicle_local_position.z <= self.takeoff_height:
            self.land()
            exit(0)

        if self.offboard_setpoint_counter < 11:
            self.offboard_setpoint_counter += 1

import socket
import struct

# Define the message type structure
class Waypoint:
    def __init__(self, x, y, z):
        self.x = x
        self.y = y
        self.z = z

# Function to serialize the message
def serialize_waypoint(waypoint):
    return struct.pack('<fff', waypoint.x, waypoint.y, waypoint.z)

def send_lawnmower_path(width, length, altitude, spacing):
    # Create UDP socket to connect to Micro XRCE Agent
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

    waypoints = []

    # Generate the pattern along the width
    for x in range(0, int(length / spacing)):
        # Alternate the direction of the path
        if x % 2 == 0:
            for y in range(0, int(width / spacing)):
                waypoint = Waypoint(x * spacing, y * spacing, altitude)
                waypoints.append(waypoint)
        else:
            for y in range(int(width / spacing) - 1, -1, -1):
                waypoint = Waypoint(x * spacing, y * spacing, altitude)
                waypoints.append(waypoint)

    # Serialize and send waypoints to the Micro XRCE Agent
    for waypoint in waypoints:
        serialized_waypoint = serialize_waypoint(waypoint)
        sock.sendto(serialized_waypoint, ('localhost', 888))  # Replace with appropriate address and port

# Example inputs
lawnmower_width = 100.0  # Width of the area to cover
lawnmower_length = 200.0  # Length of the area to cover
lawnmower_altitude = 50.0  # Altitude for the UAV
lawnmower_spacing = 10.0  # Spacing between waypoints

# Send lawnmower path to the UAV via Micro XRCE Agent
send_lawnmower_path(lawnmower_width, lawnmower_length, lawnmower_altitude, lawnmower_spacing)
